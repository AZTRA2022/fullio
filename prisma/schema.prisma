// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Eleve {
  id             Int       @id @default(autoincrement())
  matricule      String    @unique
  nom            String
  prenom         String
  dateNaissance  DateTime?
  age            Int?
  lieuNaissance  String?
  sexe           Sexe      @default(MASCULIN)
  nationalite    String?
  adresse        String?
  telephone      String?
  email          String?   @unique
  image          String?   // URL or path to the image
  anneeScolaire  AnneeScolaire @relation(fields: [anneeScolaireId], references: [id])
  anneeScolaireId Int
  classe         Classe    @relation(fields: [classeId], references: [id])
  classeId       Int
  parents        Parent[]
  inscriptions   Inscription[]
  trimestres     Trimestre[]
  residence      String?
  // Add any other relevant fields

  @@map("eleves")
}

model AnneeScolaire {
  id        Int      @id @default(autoincrement())
  annee     String   @unique
  eleves    Eleve[]
  classes   Classe[]

  @@map("annees_scolaires")
}

model Classe {
  id             Int       @id @default(autoincrement())
  nom            String
  anneeScolaire  AnneeScolaire @relation(fields: [anneeScolaireId], references: [id])
  anneeScolaireId Int
  eleves         Eleve[]
  inscriptions   Inscription[]

  @@map("classes")
}

model Parent {
  id          Int      @id @default(autoincrement())
  nom         String
  prenom      String
  telephone   String?
  email       String?
  adresse     String?
  eleve       Eleve    @relation(fields: [eleveId], references: [id])
  eleveId     Int

  @@map("parents")
}

model Trimestre {
  id                 Int      @id @default(autoincrement())
  numero             Int
  debut              DateTime
  fin                DateTime
  eleve              Eleve    @relation(fields: [eleveId], references: [id])
  eleveId            Int
  matiereEvaluations MatiereEvaluation[]
  moyenneGenerale    Float?   // Overall average for the trimester
  decision           String?  // e.g., "Admis", "Ajourn√©"
  conseilDeClasse    String?  // Comments from the class council
  absencesJustifiees Int?
  absencesNonJustifiees Int?
  retards            Int?

  @@map("trimestres")
}

model MatiereEvaluation {
  id          Int      @id @default(autoincrement())
  matiere     Matiere  @relation(fields: [matiereId], references: [id])
  matiereId   Int
  trimestre   Trimestre @relation(fields: [trimestreId], references: [id])
  trimestreId Int
  note        Float?
  rang        Int?
  appreciation  String?
  inscription Inscription? @relation(fields: [inscriptionId], references: [id])
  inscriptionId Int?
  moyenne     Float?   // Average in this subject for the trimester
  credit      Int?     // Credit earned for the subject
  coeficient  Int?     // Coefficient of the subject

  @@map("matiere_evaluations")
}

model Matiere {
  id        Int      @id @default(autoincrement())
  nom       String   @unique
  professeur String?
  matiereEvaluations MatiereEvaluation[]

  @@map("matieres")
}

model Inscription {
  id             Int       @id @default(autoincrement())
  dateInscription DateTime @default(now())
  eleve          Eleve     @relation(fields: [eleveId], references: [id])
  eleveId        Int
  classe         Classe    @relation(fields: [classeId], references: [id])
  classeId       Int
  matiereEvaluations MatiereEvaluation[]

  @@map("inscriptions")
}

enum Sexe {
  MASCULIN
  FEMININ
}